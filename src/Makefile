CFLAGS = gcc -c -Wall -Werror -Wextra -std=c11
TFLAGS = gcc -std=c11 #переменная OS содержит результат выполнения команды uname -s, которая возвращает имя операционной системы. Это нужно для определения операционной системы и выбора соответствующих флагов компилятора
GVFLAGS = -L. -ls21_string --coverage
OS := $(shell uname)

ifeq ($(OS), Linux) # проверяет, является ли операционная система Linux. Если это так, то переменная CHECK_FLAGS будет содержать дополнительные флаги компилятора 
	CHECK_FLAGS = -pthread -lrt -lm -lsubunit -lcheck
else
	CHECK_FLAGS = -lcheck
endif

COMPILE = $(TFLAGS) test.c libs21_string.a $(CHECK_FLAGS) -L. -ls21_string #задает переменную COMPILE, которая содержит команду компиляции исходного кода test.c с использованием библиотеки s21_string и дополнительных флагов компилятора

all: s21_string.a  #выполнять сборку статической библиотеки s21_string.a, выполнение тестов и генерацию отчета о покрытии кода

test: s21_string.a #задает цель test, которая будет компилировать исходный код test.c с использованием библиотеки s21_string.a и дополнительных флагов компилятора, а затем выполнять полученный исполняемый файл
	$(COMPILE)
#./a.out

gcov_report: s21_string.a  #генерирует отчет о покрытии кода. Сначала удаляются предыдущие отчеты о покрытии, затем выполняется команда $(TFLAGS) для компиляции и запуска исполняемого файла с использованием флагов GVFLAGS и CHECK_FLAGS. После этого создается отчет о покрытии с помощью утилиты lcov и генерируется HTML-отчет с помощью утилиты genhtml. Отчет открывается в браузере с помощью команды open.
	rm -f *.g*  
	$(TFLAGS) s21_*.c test.c libs21_string.a $(CHECK_FLAGS) $(GVFLAGS) 
	./a.out
	lcov -t a.out -o rep.info -c -d .
	genhtml -o report rep.info
	open ./report/index.html
	

s21_string.a: s21_string.o  #создает статическую библиотеку libs21_string.a на основе объектного файла s21_string.o и копирует ее в файлы s21_string.a и ls21_string.a.
#Цель s21_string.a создает статическую библиотеку libs21_string.a.
#Для этого используется объектный файл s21_string.o.
#После создания статической библиотеки, она копируется в файлы s21_string.a и ls21_string.a.
	ar rcs libs21_string.a *.o
	ranlib libs21_string.a
	cp libs21_string.a s21_string.a
	cp libs21_string.a ls21_string.a

s21_string.o:
#компилирует файлы s21*.c с помощью флагов CFLAGS и создает объектные файлы.
#Цель s21_string.o компилирует файлы, имя которых начинается с "s21" и имеют расширение .c.
#Для компиляции используются флаги CFLAGS.
#Создаются объектные файлы.
	$(CFLAGS) s21*.c
clean:
#удаляет все временные файлы, созданные в процессе сборки и тестирования.
#Цель clean используется для очистки проекта от временных файлов.
#Удаляются все файлы, созданные в процессе сборки и тестирования
	-rm -rf *.o && rm -rf *.gcno
	-rm -rf *.a && rm -rf *.gcda
	-rm -rf *.info && rm -rf *.gcov
	-rm -rf ./test && rm -rf ./gcov_report
	-rm -rf ./report/
	-rm -rf s21_test
	-rm -rf ./a.out

rebuild: clean all #сначала выполняет цель clean для удаления всех временных файлов, а затем выполняет цель all для повторной сборки и тестирования.
#Цель rebuild используется для полной пересборки и повторного тестирования проекта.
#Сначала выполняется цель clean для удаления всех временных файлов.
#Затем выполняется цель all для повторной сборки и тестирования.